

ðŸ“‚ /home/trexcodes/miweb
â”‚â”€â”€ ðŸ“œ app.py              # CÃ³digo principal de Flask
â”‚â”€â”€ ðŸ“œ wsgi.py             # Punto de entrada para uWSGI
â”‚â”€â”€ ðŸ“œ uwsgi.ini           # ConfiguraciÃ³n de uWSGI
â”‚â”€â”€ ðŸ“‚ venv/               # Entorno virtual de Python
â”‚   â”œâ”€â”€ ðŸ“‚ bin/            # Ejecutables del entorno virtual
â”‚   â”œâ”€â”€ ðŸ“‚ lib/            # Bibliotecas de Python
â”‚   â”œâ”€â”€ ðŸ“‚ include/        # Archivos de cabecera
â”‚â”€â”€ ðŸ“‚ templates/          # Archivos HTML
â”‚   â”œâ”€â”€ ðŸ“œ index.html      # PÃ¡gina principal
â”‚â”€â”€ ðŸ“‚ static/             # Archivos estÃ¡ticos
â”‚   â”œâ”€â”€ ðŸ“‚ css/            # Estilos CSS
â”‚   â”‚   â”œâ”€â”€ ðŸ“œ style.css   # Archivo de estilos
â”‚   â”œâ”€â”€ ðŸ“‚ js/             # Archivos JavaScript
â”‚   â”‚   â”œâ”€â”€ ðŸ“œ script.js   # Archivo de scripts
â”‚   â”œâ”€â”€ ðŸ“‚ img/            # ImÃ¡genes del sitio
â”‚   â”‚   â”œâ”€â”€ ðŸ“œ logo.png    # Ejemplo de imagen
â”‚â”€â”€ ðŸ“‚ logs/               # Carpeta de logs (opcional)
â”‚   â”œâ”€â”€ ðŸ“œ uwsgi.log       # Logs de uWSGI
â”‚   â”œâ”€â”€ ðŸ“œ nginx.log       # Logs de Nginx
â”‚
ðŸ“‚ /etc/nginx/sites-available/
â”‚â”€â”€ ðŸ“œ miweb               # ConfiguraciÃ³n de Nginx para el sitio
ðŸ“‚ /etc/nginx/sites-enabled/
â”‚â”€â”€ ðŸ“œ miweb               # Enlace simbÃ³lico de la configuraciÃ³n
ðŸ“‚ /etc/systemd/system/
â”‚â”€â”€ ðŸ“œ miweb.service       # Servicio systemd para uWSGI



INSTALAR GNINX**

sudo apt update && apt install nginx -y
sudo apt install -y python3 python3-venv python3-pip

--------------------------------------------------------

1. CREACION DE PROYECTO EN FLASK

mkdir -p ~/miweb && cd ~/miweb

python3 -m venv venv
source venv/bin/activate

# Flask (framework Web) y uWSGI (servicio con Nginx)
pip install flask uwsgi


--------------------------------------------------------

2. CREACION DE APLICACION FLASK

nano ~/miweb/app.py

from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def home():
    return render_template("index.html")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)

--------------------------------------------------------

3. CREACION DE CARPETA TEMPLATES Y HTML

mkdir -p ~/miweb/templates
mkdir -p ~/miweb/static/css
mkdir -p ~/miweb/static/js
mkdir -p ~/miweb/static/img


nano ~/miweb/templates/index.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Web con Flask</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>

    <div class="navbar">
        <a href="#">Inicio</a>
        <a href="#">Acerca</a>
        <a href="#">Contacto</a>
    </div>

    <div class="container">
        <div class="box">
            <h1>Bienvenido a mi web</h1>
            <p>Esta es una pÃ¡gina web servida con Flask y Nginx.</p>
            <button onclick="mostrarMensaje()">Haz clic aquÃ­</button>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/script.js') }}"></script>
</body>
</html>

*********************

nano ~/miweb/static/css/style.css

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

.navbar {
    background-color: #333;
    padding: 10px;
    text-align: center;
}

.navbar a {
    color: white;
    text-decoration: none;
    padding: 14px 20px;
    display: inline-block;
}

.container {
    padding: 20px;
    text-align: center;
}

.box {
    background: white;
    padding: 20px;
    margin: 20px auto;
    width: 50%;
    border-radius: 8px;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
}

*********************

nano ~/miweb/static/js/script.js

function mostrarMensaje() {
    alert("Â¡Hola! Has hecho clic en el botÃ³n.");
}

--------------------------------------------------------

4. CREACION CARPETAS DE ESTRCUTURA PARA FLASK


mkdir -p ~/miweb/templates
mkdir -p ~/miweb/static/css
mkdir -p ~/miweb/static/js
mkdir -p ~/miweb/static/img

miweb/
â”œâ”€â”€ app.py
â”œâ”€â”€ templates/
â”‚   â”œâ”€â”€ index.html
â”œâ”€â”€ static/
â”‚   â”œâ”€â”€ css/
â”‚   â”œâ”€â”€ js/
â”‚   â”œâ”€â”€ img/




--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------

5. CREACION ARHIVO WSGI.PY

nano /home/trexcodes/miweb/wsgi.py

from app import app

if __name__ == "__main__":
    app.run()

--------------------------------------------------------

6. CONFIGURAR SYSTEMD PARA INICAR UWSGI

sudo nano /etc/systemd/system/miweb.service

[Unit]
Description=uWSGI server for miweb
After=network.target

[Service]
User=trexcodes
Group=www-data
WorkingDirectory=/home/trexcodes/miweb
Environment="PATH=/home/trexcodes/miweb/venv/bin"
ExecStart=/home/trexcodes/miweb/venv/bin/uwsgi --ini uwsgi.ini

[Install]
WantedBy=multi-user.target

--------------------------------------------------------

7.

3. CONFIGURAR NGINX (PROXY INVERSO)

sudo nano /etc/nginx/sites-available/miweb

server {
    listen 80;
    server_name 192.168.1.14;  # Cambia esto por tu IP

    location / {
        include uwsgi_params;
        uwsgi_pass unix:/home/trexcodes/miweb/miweb.sock;
    }
}

***************

sudo ln -s /etc/nginx/sites-available/miweb /etc/nginx/sites-enabled/
sudo nginx -t  # Verifica si hay errores en la configuraciÃ³n
sudo systemctl restart nginx

--------------------------------------------------------

5. EDITAR  Y CONFIGURAR USWGI.INI

nano /home/trexcodes/miweb/uwsgi.ini

[uwsgi]
module = wsgi:app
master = true
processes = 4
socket = /home/trexcodes/miweb/miweb.sock
chmod-socket = 660
vacuum = true
die-on-term = true

--------------------------------------------------------

6. HABILITAR Y REINICIAR uWSGI

sudo systemctl daemon-reload
sudo systemctl start miweb
sudo systemctl enable miweb
sudo systemctl status miweb

--------------------------------------------------------
sudo systemctl restart nginx
sudo systemctl restart miweb








